// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"myGolangs/dal/model"
)

func newSysRegion(db *gorm.DB, opts ...gen.DOOption) sysRegion {
	_sysRegion := sysRegion{}

	_sysRegion.sysRegionDo.UseDB(db, opts...)
	_sysRegion.sysRegionDo.UseModel(&model.SysRegion{})

	tableName := _sysRegion.sysRegionDo.TableName()
	_sysRegion.ALL = field.NewAsterisk(tableName)
	_sysRegion.ID = field.NewInt32(tableName, "id")
	_sysRegion.Name = field.NewString(tableName, "name")
	_sysRegion.ShortName = field.NewString(tableName, "short_name")
	_sysRegion.Code = field.NewString(tableName, "code")
	_sysRegion.ParentCode = field.NewString(tableName, "parent_code")
	_sysRegion.Level = field.NewInt32(tableName, "level")
	_sysRegion.Flag = field.NewInt32(tableName, "flag")

	_sysRegion.fillFieldMap()

	return _sysRegion
}

type sysRegion struct {
	sysRegionDo sysRegionDo

	ALL        field.Asterisk
	ID         field.Int32  // 地区主键编号
	Name       field.String // 地区名称
	ShortName  field.String // 简称
	Code       field.String // 行政地区编号
	ParentCode field.String // 父id
	/*
		1级：省、直辖市、自治区
		2级：地级市
		3级：市辖区、县（旗）、县级市、自治县（自治旗）、特区、林区
		4级：镇、乡、民族乡、县辖区、街道
		5级：村、居委会
	*/
	Level field.Int32
	Flag  field.Int32 // 0:正常 1废弃

	fieldMap map[string]field.Expr
}

func (s sysRegion) Table(newTableName string) *sysRegion {
	s.sysRegionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRegion) As(alias string) *sysRegion {
	s.sysRegionDo.DO = *(s.sysRegionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRegion) updateTableName(table string) *sysRegion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.ShortName = field.NewString(table, "short_name")
	s.Code = field.NewString(table, "code")
	s.ParentCode = field.NewString(table, "parent_code")
	s.Level = field.NewInt32(table, "level")
	s.Flag = field.NewInt32(table, "flag")

	s.fillFieldMap()

	return s
}

func (s *sysRegion) WithContext(ctx context.Context) *sysRegionDo {
	return s.sysRegionDo.WithContext(ctx)
}

func (s sysRegion) TableName() string { return s.sysRegionDo.TableName() }

func (s sysRegion) Alias() string { return s.sysRegionDo.Alias() }

func (s sysRegion) Columns(cols ...field.Expr) gen.Columns { return s.sysRegionDo.Columns(cols...) }

func (s *sysRegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRegion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["short_name"] = s.ShortName
	s.fieldMap["code"] = s.Code
	s.fieldMap["parent_code"] = s.ParentCode
	s.fieldMap["level"] = s.Level
	s.fieldMap["flag"] = s.Flag
}

func (s sysRegion) clone(db *gorm.DB) sysRegion {
	s.sysRegionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysRegion) replaceDB(db *gorm.DB) sysRegion {
	s.sysRegionDo.ReplaceDB(db)
	return s
}

type sysRegionDo struct{ gen.DO }

func (s sysRegionDo) Debug() *sysRegionDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRegionDo) WithContext(ctx context.Context) *sysRegionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRegionDo) ReadDB() *sysRegionDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRegionDo) WriteDB() *sysRegionDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRegionDo) Session(config *gorm.Session) *sysRegionDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRegionDo) Clauses(conds ...clause.Expression) *sysRegionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRegionDo) Returning(value interface{}, columns ...string) *sysRegionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRegionDo) Not(conds ...gen.Condition) *sysRegionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRegionDo) Or(conds ...gen.Condition) *sysRegionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRegionDo) Select(conds ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRegionDo) Where(conds ...gen.Condition) *sysRegionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRegionDo) Order(conds ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRegionDo) Distinct(cols ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRegionDo) Omit(cols ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRegionDo) Join(table schema.Tabler, on ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRegionDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRegionDo) Group(cols ...field.Expr) *sysRegionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRegionDo) Having(conds ...gen.Condition) *sysRegionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRegionDo) Limit(limit int) *sysRegionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRegionDo) Offset(offset int) *sysRegionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysRegionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRegionDo) Unscoped() *sysRegionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRegionDo) Create(values ...*model.SysRegion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRegionDo) CreateInBatches(values []*model.SysRegion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRegionDo) Save(values ...*model.SysRegion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRegionDo) First() (*model.SysRegion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRegion), nil
	}
}

func (s sysRegionDo) Take() (*model.SysRegion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRegion), nil
	}
}

func (s sysRegionDo) Last() (*model.SysRegion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRegion), nil
	}
}

func (s sysRegionDo) Find() ([]*model.SysRegion, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysRegion), err
}

func (s sysRegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRegion, err error) {
	buf := make([]*model.SysRegion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRegionDo) FindInBatches(result *[]*model.SysRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRegionDo) Attrs(attrs ...field.AssignExpr) *sysRegionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRegionDo) Assign(attrs ...field.AssignExpr) *sysRegionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRegionDo) Joins(fields ...field.RelationField) *sysRegionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRegionDo) Preload(fields ...field.RelationField) *sysRegionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRegionDo) FirstOrInit() (*model.SysRegion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRegion), nil
	}
}

func (s sysRegionDo) FirstOrCreate() (*model.SysRegion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRegion), nil
	}
}

func (s sysRegionDo) FindByPage(offset int, limit int) (result []*model.SysRegion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRegionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRegionDo) Delete(models ...*model.SysRegion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRegionDo) withDO(do gen.Dao) *sysRegionDo {
	s.DO = *do.(*gen.DO)
	return s
}
